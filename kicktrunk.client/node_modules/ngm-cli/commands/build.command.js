// todo: add load from config file, TBD
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const Listr = require('listr');
const cpy = require('cpy');
const del = require('del');
const npm_submodules_1 = require("npm-submodules");
const tasks_1 = require("../tasks");
function buildCommand({ project, verbose, clean, local, main, watch, skipBundles }) {
    // 1. clean dist folders
    // 2.1 merge pkg json
    // todo: 2.2 validate pkg (main, module, types fields)
    // 2.3 write pkg
    // 3. compile ts
    return npm_submodules_1.findSubmodules(project, { local })
        .then(opts => new Listr([
        {
            title: 'Clean dist folders',
            task: () => new Listr(opts.map(opt => ({
                title: `Cleaning ${opt.dist}`,
                task: () => del(opt.dist)
            }))),
            skip: () => !clean
        },
        {
            title: 'Copy md files and license',
            task: () => Promise.all(opts.map(opt => cpy(['*.md', 'LICENSE'], opt.dist)
                .then(() => cpy([path.join(opt.src, '*.md'),
                path.join(opt.src, 'LICENSE')], opt.dist))))
        },
        {
            title: "Build package.json files",
            task: () => npm_submodules_1.buildPkgs(opts, { local })
        },
        {
            title: 'Build projects',
            task: () => new Listr(opts.map(opt => ({
                title: `Building ${opt.pkg.name} (${opt.src})`,
                task: () => tasks_1.build(opt.project)
            })))
        },
        {
            title: 'Bundling umd version',
            task: () => new Listr(opts.map(opt => ({
                title: `Bundling ${opt.pkg.name}`,
                task: () => tasks_1.bundleUmd({
                    main,
                    src: opt.src,
                    dist: opt.dist,
                    name: opt.pkg.name,
                    tsconfig: opt.tsconfig.path,
                    minify: false
                })
            }))),
            skip: () => watch && skipBundles
        },
        {
            title: 'Bundling minified umd version',
            task: () => new Listr(opts.map(opt => ({
                title: `Bundling ${opt.pkg.name}`,
                task: () => tasks_1.bundleUmd({
                    main,
                    src: opt.src,
                    dist: opt.dist,
                    name: opt.pkg.name,
                    tsconfig: opt.tsconfig.path,
                    minify: true
                })
            }))),
            skip: () => watch || skipBundles
        },
    ], { renderer: verbose ? 'verbose' : 'default' }));
}
exports.buildCommand = buildCommand;
function buildTsRun(cli) {
    const { project, watch, verbose, clean, local, skipBundles } = cli.flags;
    let main = cli.flags.main || 'index.ts';
    return buildCommand({ project, verbose, clean, local, main, watch, skipBundles })
        .then(tasks => npm_submodules_1.tasksWatch({ project, tasks, watch }));
}
exports.buildTsRun = buildTsRun;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQuY29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9uZ20vY29tbWFuZHMvYnVpbGQuY29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx1Q0FBdUM7OztBQUV2Qyw2QkFBOEI7QUFDOUIsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQy9CLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMzQixNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFFM0IsbURBQXVFO0FBQ3ZFLG9DQUE0QztBQUU1QyxzQkFBNkIsRUFBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUM7SUFDckYsd0JBQXdCO0lBQ3hCLHFCQUFxQjtJQUNyQixzREFBc0Q7SUFDdEQsZ0JBQWdCO0lBQ2hCLGdCQUFnQjtJQUNoQixNQUFNLENBQUMsK0JBQWMsQ0FBQyxPQUFPLEVBQUUsRUFBQyxLQUFLLEVBQUMsQ0FBQztTQUNwQyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDO1FBQ3RCO1lBQ0UsS0FBSyxFQUFFLG9CQUFvQjtZQUMzQixJQUFJLEVBQUUsTUFBTSxJQUFJLEtBQUssQ0FDbkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQztnQkFDZixLQUFLLEVBQUUsWUFBWSxHQUFHLENBQUMsSUFBSSxFQUFFO2dCQUM3QixJQUFJLEVBQUUsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQzthQUMxQixDQUFDLENBQUMsQ0FDSjtZQUNELElBQUksRUFBRSxNQUFNLENBQUMsS0FBSztTQUNuQjtRQUNEO1lBQ0UsS0FBSyxFQUFFLDJCQUEyQjtZQUNsQyxJQUFJLEVBQUUsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUks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